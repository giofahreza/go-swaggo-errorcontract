// main.go
package main

import (
	"net/http"
	"strconv"

	_ "go-swaggo-errorcontract/docs" // docs is generated by Swag CLI

	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title Echo Swagger Example API
// @version 1.0
// @description This is a sample server for demonstrating Swagger with Echo.
// @host localhost:8080
// @BasePath /

// UserForm represents a user submitted via form-data
type UserForm struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// User represents a user model
type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var users = []User{
	{ID: 1, Name: "Alice"},
}

// getUsers godoc
// @Summary Get all users
// @Tags users
// @Produce json
// @Success 200 {array} User
// @Router /users [get]
func getUsers(c echo.Context) error {
	return c.JSON(http.StatusOK, users)
}

// createUser godoc
// @Summary Create a new user
// @Tags users
// @Accept json
// @Produce json
// @Param user body User true "User to create"
// @Success 201 {object} User
// @Router /users [post]
func createUser(c echo.Context) error {
	u := new(User)
	if err := c.Bind(u); err != nil {
		return err
	}
	u.ID = len(users) + 1
	users = append(users, *u)
	return c.JSON(http.StatusCreated, u)
}

// submitForm godoc
// @Summary Submit user via form-data
// @Description Submit name and age via form-data (multipart)
// @Tags form
// @Accept mpfd
// @Produce json
// @Param name formData string true "User name"
// @Param age formData int true "User age"
// @Success 200 {object} UserForm
// @Router /submit-form [post]
func submitForm(c echo.Context) error {
	name := c.FormValue("name")
	ageStr := c.FormValue("age")

	age, err := strconv.Atoi(ageStr)
	if err != nil {
		return c.JSON(http.StatusBadRequest, echo.Map{"error": "invalid age"})
	}

	return c.JSON(http.StatusOK, UserForm{
		Name: name,
		Age:  age,
	})
}

func main() {
	e := echo.New()

	// Swagger route
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// API routes
	e.GET("/users", getUsers)
	e.POST("/users", createUser)
	e.POST("/submit-form", submitForm)

	e.Logger.Fatal(e.Start(":8080"))
}
